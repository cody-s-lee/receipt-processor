/*
Receipt Processor

A simple receipt processor

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Receipt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Receipt{}

// Receipt struct for Receipt
type Receipt struct {
	// The name of the retailer or store the receipt is from.
	Retailer string `json:"retailer" validate:"regexp=^[\\\\w\\\\s\\\\-&]+$"`
	// The date of the purchase printed on the receipt.
	PurchaseDate string `json:"purchaseDate"`
	// The time of the purchase printed on the receipt. 24-hour time expected.
	PurchaseTime string `json:"purchaseTime"`
	Items []Item `json:"items"`
	// The total amount paid on the receipt.
	Total string `json:"total" validate:"regexp=^\\\\d+\\\\.\\\\d{2}$"`
}

type _Receipt Receipt

// NewReceipt instantiates a new Receipt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReceipt(retailer string, purchaseDate string, purchaseTime string, items []Item, total string) *Receipt {
	this := Receipt{}
	this.Retailer = retailer
	this.PurchaseDate = purchaseDate
	this.PurchaseTime = purchaseTime
	this.Items = items
	this.Total = total
	return &this
}

// NewReceiptWithDefaults instantiates a new Receipt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReceiptWithDefaults() *Receipt {
	this := Receipt{}
	return &this
}

// GetRetailer returns the Retailer field value
func (o *Receipt) GetRetailer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Retailer
}

// GetRetailerOk returns a tuple with the Retailer field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetRetailerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Retailer, true
}

// SetRetailer sets field value
func (o *Receipt) SetRetailer(v string) {
	o.Retailer = v
}

// GetPurchaseDate returns the PurchaseDate field value
func (o *Receipt) GetPurchaseDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PurchaseDate
}

// GetPurchaseDateOk returns a tuple with the PurchaseDate field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetPurchaseDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PurchaseDate, true
}

// SetPurchaseDate sets field value
func (o *Receipt) SetPurchaseDate(v string) {
	o.PurchaseDate = v
}

// GetPurchaseTime returns the PurchaseTime field value
func (o *Receipt) GetPurchaseTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PurchaseTime
}

// GetPurchaseTimeOk returns a tuple with the PurchaseTime field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetPurchaseTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PurchaseTime, true
}

// SetPurchaseTime sets field value
func (o *Receipt) SetPurchaseTime(v string) {
	o.PurchaseTime = v
}

// GetItems returns the Items field value
func (o *Receipt) GetItems() []Item {
	if o == nil {
		var ret []Item
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetItemsOk() ([]Item, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *Receipt) SetItems(v []Item) {
	o.Items = v
}

// GetTotal returns the Total field value
func (o *Receipt) GetTotal() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetTotalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *Receipt) SetTotal(v string) {
	o.Total = v
}

func (o Receipt) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Receipt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["retailer"] = o.Retailer
	toSerialize["purchaseDate"] = o.PurchaseDate
	toSerialize["purchaseTime"] = o.PurchaseTime
	toSerialize["items"] = o.Items
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *Receipt) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"retailer",
		"purchaseDate",
		"purchaseTime",
		"items",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReceipt := _Receipt{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReceipt)

	if err != nil {
		return err
	}

	*o = Receipt(varReceipt)

	return err
}

type NullableReceipt struct {
	value *Receipt
	isSet bool
}

func (v NullableReceipt) Get() *Receipt {
	return v.value
}

func (v *NullableReceipt) Set(val *Receipt) {
	v.value = val
	v.isSet = true
}

func (v NullableReceipt) IsSet() bool {
	return v.isSet
}

func (v *NullableReceipt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReceipt(val *Receipt) *NullableReceipt {
	return &NullableReceipt{value: val, isSet: true}
}

func (v NullableReceipt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReceipt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


